from optparse import OptionParser
import pathlib
import shutil
import sys
import os
sys.path.append('taxman-engine/Scripts')
from generate_sprite_sheet import generate_sprite_sheet


def clear_asset_directory(asset_directory):
    if os.path.exists(asset_directory):
        shutil.rmtree(asset_directory)
    os.mkdir(asset_directory)


def list_source_directories(base_directory):
    return list_directories_containing_file_type(base_directory, '.c')


def list_header_directories(base_directory):
    return list_directories_containing_file_type(base_directory, '.h')


def list_directories_containing_file_type(base_directory, file_type):
    source_directories = []
    for root, _, files in os.walk(base_directory):
        for file in files:
            if pathlib.Path(file).suffix == file_type:
                source_directories.append(root)
                break
    return sorted(source_directories)


def create_makefile(game_name, source_dirs, header_dirs, main_file_dir):
    heap_size = 8388208
    stack_size = 61800

    file = open('Makefile', 'w', encoding='UTF-8')
    file.write(
        '# This file is generated by the update_project.py script.\n'
        + '# Manual edits will be overwritten by the next update.\n'
        + '\n'
    )

    file.write(
        'HEAP_SIZE      = ' + str(heap_size) + '\n'
        + 'STACK_SIZE     = ' + str(stack_size) + '\n'
        + '\n'
        + 'PRODUCT = ' + game_name + '.pdx\n'
        + '\n'
        + '# Locate the SDK\n'
        + 'SDK = ${PLAYDATE_SDK_PATH}\n'
        + 'ifeq ($(SDK),)\n'
        + '	SDK = $(shell egrep \'^\\s*SDKRoot\' '
        + '~/.Playdate/config | head -n 1 | cut -c9-)\n'
        + 'endif\n'
        + '\n'
        + 'ifeq ($(SDK),)\n'
        + '$(error SDK path not found; set ENV value PLAYDATE_SDK_PATH)\n'
        + 'endif\n'
    )

    file.write('\nCSRC = $(wildcard src/*.c)')
    for directory in source_dirs:
        file.write(' \\\n       $(wildcard ' + directory + '/*.c)')

    file.write(
        '\n'
        + '\n'
        + '######\n'
        + '# IMPORTANT: You must add your source '
        + 'folders to VPATH for make to find them\n'
        + '# ex: VPATH += src1:src2\n'
        + '######\n'
    )

    file.write('\nVPATH += ' + main_file_dir)
    for directory in source_dirs:
        file.write(':' + directory)

    file.write(
        '\n# List C source files here\n'
        + 'SRC = $(CSRC)\n'
    )

    file.write(
        '\n# List all user directories here\n'
        + 'UINCDIR = ' + main_file_dir
    )
    for directory in header_dirs:
        file.write(' ' + directory)

    file.write(
        '\n'
        + '\n'
        + '# List user asm files\n'
        + 'UASRC = \n'
        + '\n'
        + '\n# List all user C define here, like -D_DEBUG=1\n'
        + 'UDEFS = \n'
        + '\n'
        + '# Define ASM defines here\n'
        + 'UADEFS = \n'
        + '\n'
        + '# List the user directory to look for the libraries here\n'
        + 'ULIBDIR = \n'
        + '\n'
        + '# List all user libraries here\n'
        + '\n'
        + 'ULIBS =\n'
        + '\n'
        + 'include $(SDK)/C_API/buildsupport/common.mk'
        + '\n\n'
    )

    file.close()


def create_cmake_project(game_name, main_file_directory):
    file = open('CMakeLists.txt', 'w', encoding='UTF-8')
    file.write(
        '# This file is generated by the update_project.py script.\n'
        + '# Manual edits will be overwritten by the next update.\n'
        + '\n'
    )

    file.write(
        'cmake_minimum_required(VERSION 3.14)\n'
        + 'set(CMAKE_C_STANDARD 11)\n'
        + '\n'
        + 'set(ENVSDK $ENV{PLAYDATE_SDK_PATH})\n'
        + '\n'
        + 'if (NOT ${ENVSDK} STREQUAL "")\n'
        + '	# Convert path from Windows\n'
        + '	file(TO_CMAKE_PATH ${ENVSDK} SDK)\n'
        + 'else()\n'
        + '	execute_process(\n'
        + '			COMMAND bash -c "egrep \'^\\\\s*SDKRoot\' $HOME/.Playdate/config"\n'
        + '			COMMAND head -n 1\n'
        + '			COMMAND cut -c9-\n'
        + '			OUTPUT_VARIABLE SDK\n'
        + '			OUTPUT_STRIP_TRAILING_WHITESPACE\n'
        + '	)\n'
        + 'endif()\n'
        + '\n'
        + 'if (NOT EXISTS ${SDK})\n'
        + '	message(FATAL_ERROR "SDK Path not found; set ENV value PLAYDATE_SDK_PATH")\n'
        + '	return()\n'
        + 'endif()\n'
        + '\n'
        + 'set(CMAKE_CONFIGURATION_TYPES "Debug;Release")\n'
        + '\n'
        + '# Game Name Customization\n'
        + 'set(PLAYDATE_GAME_NAME ' + game_name + ')\n'
        + 'set(PLAYDATE_GAME_DEVICE ' + game_name + '_DEVICE)\n'
        + '\n'
        + 'project(${PLAYDATE_GAME_NAME} C ASM)\n'
        + '\n'
        + 'if (TOOLCHAIN STREQUAL "armgcc")\n'
        + '	add_executable(${PLAYDATE_GAME_DEVICE} '
        + '${SDK}/C_API/buildsupport/setup.c ' +
        main_file_directory + '/main.c)\n'
        + 'else()\n'
        + '	add_library(${PLAYDATE_GAME_NAME} SHARED ' +
        main_file_directory + '/main.c )\n'
        + 'endif()\n'
        + '\n'
        + 'include(${SDK}/C_API/buildsupport/playdate_game.cmake)\n'
        + '\n'
    )


def generate_sprite_sheets_from_directories(source_path, target_path, skipped_directory):
    source_directories = []
    for file in os.listdir(source_path):
        dir_path = os.path.join(source_path, file)
        if os.path.isdir(dir_path):
          if file == skipped_directory:
              continue
          for sub_file in os.listdir(dir_path):
              if pathlib.Path(sub_file).suffix == '.png':
                  source_directories.append(dir_path)
                  break

    for dir_path in source_directories:
        generate_sprite_sheet(dir_path, target_path)
  

def copy_asset_files(source_path, target_path):
    for file in os.listdir(source_path):
        file_path = os.path.join(source_path, file)
        if not os.path.isfile(file_path):
            continue
        shutil.copy(file_path, target_path)


def copy_launcher_images(raw_asset_directory, launcher_image_directory, asset_directory):
    path = os.path.join(raw_asset_directory, launcher_image_directory)
    if not os.path.isdir(path):
        print(f'{path} is not a directory, cannot copy launcher images')
        return
    target_path = os.path.join(asset_directory, launcher_image_directory)
    os.mkdir(target_path)
    for _, dirs, files in os.walk(path):
        for file in files:
            file_path = os.path.join(path, file)
            if not os.path.isfile(file_path) or file.startswith('.'):
                continue
            output_path = os.path.join(target_path, file)
            shutil.copy(file_path, output_path)
        for directory in dirs:
            dir_path = os.path.join(path, directory)
            target_dir_path = os.path.join(target_path, directory)
            os.mkdir(target_dir_path)
            for file in os.listdir(dir_path):
                file_path = os.path.join(dir_path, file)
                if not os.path.isfile(file_path) or file.startswith('.'):
                    continue
                output_path = os.path.join(target_dir_path, file)
                shutil.copy(file_path, output_path)


def rename_images(asset_directory):
    for file in os.listdir(asset_directory):
        if pathlib.Path(file).suffix == '.png':
            os.rename(
                os.path.join(asset_directory, file),
                os.path.join(asset_directory, file.replace('.png', '.pngi'))
            )


def update_assets(raw_asset_directory, asset_directory, launcher_images_directory):
    print('update ' + asset_directory)
    generate_sprite_sheets_from_directories(
        raw_asset_directory,
        asset_directory,
        launcher_images_directory
    )
    copy_asset_files(raw_asset_directory, asset_directory)
    rename_images(asset_directory)
    copy_launcher_images(raw_asset_directory, launcher_images_directory, asset_directory)


def main():
    usage = f'usage: {sys.argv[0]} [options] <game_name>'
    parser = OptionParser(usage=usage)

    (options, args) = parser.parse_args()
    if len(args) < 1:
        parser.print_help()
        return -1

    game_name = args[0]
    print('generate ' + game_name)

    code_root_directories = ['taxman-engine', 'game']
    main_file_directory = 'src'
    asset_directory = 'Source'
    raw_asset_directory = 'assets'
    launcher_images_directory = 'launcher_images'

    source_directories = []
    header_directories = []
    for directory in code_root_directories:
        source_directories += list_source_directories(directory)
        header_directories += list_header_directories(directory)

    create_makefile(game_name, source_directories,
                    header_directories, main_file_directory)
    create_cmake_project(game_name, main_file_directory)
    clear_asset_directory(asset_directory)
    update_assets(raw_asset_directory, asset_directory, launcher_images_directory)

    return 0


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(e)
